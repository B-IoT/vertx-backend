openapi: 3.0.0
info:
  title: Vert.x API
  description: BIoT Vert.x API
  version: 2.3.2
servers:
- url: https://virtserver.swaggerhub.com/b-iot/Vert.x/2.3.1
  description: SwaggerHub API Auto Mocking
paths:
  /relays:
    get:
      tags:
      - Relay
      description: returns all relays
      operationId: getRelays
      parameters:
      - name: offset
        in: query
        description: number of records to skip
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: max number of records to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: All the relays
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relay'
    post:
      tags:
      - Relay
      operationId: registerRelay
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelayRegisterInfo'
      responses:
        "200":
          description: OK
  /relays/{id}:
    get:
      tags:
      - Relay
      description: returns a specific relay
      operationId: getRelay
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: a relay
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relay'
    put:
      tags:
      - Relay
      description: updates a specific relay
      operationId: updateRelay
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelayUpdateInfo'
      responses:
        "200":
          description: the updated relay
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relay'
    delete:
      tags:
      - Relay
      description: deletes a specific relay
      operationId: deleteRelay
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successfully deleted relay
  /users:
    get:
      tags:
      - User
      description: returns all users
      operationId: getUsers
      parameters:
      - name: offset
        in: query
        description: number of users to skip
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: max number of users to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: all the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - User
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInfo'
      responses:
        "200":
          description: OK
  /users/authenticate:
    post:
      tags:
      - User
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthenticateInfo'
      responses:
        "200":
          description: The company of the authenticated user as a string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthenticateReturnedInfo'
        "401":
          description: Authentication error
  /users/{id}:
    get:
      tags:
      - User
      description: returns a specific user
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - User
      description: updates a specific user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInfo'
      responses:
        "200":
          description: the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
      - User
      description: deletes a specific user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successfully deleted user
  /items:
    get:
      tags:
      - Item
      description: returns all items
      operationId: getItems
      parameters:
      - name: offset
        in: query
        description: number of items to skip
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: max number of items to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: category
        in: query
        description: item category
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: accessControlString
        in: query
        description: accessControlString to access data
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: all the items accessible with the given accessControlString
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      tags:
      - Item
      operationId: registerItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRegisterInfo'
      responses:
        "200":
          description: the registered item
          content:
            text/plain:
              schema:
                type: integer
                format: int32
                example: 1
  /items/categories:
    get:
      tags:
      - Item
      description: returns all items's categories
      operationId: getCategories
      parameters:
      - name: accessControlString
        in: query
        description: accessControlString to access data
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: all the categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /items/snapshots:
    get:
      tags:
        - Item
      description: returns all snapshots
      operationId: getSnapshots
      responses:
        "200":
          description: all the snapshots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Snapshot'
    post:
      tags:
        - Item
      operationId: createSnapshot
      responses:
        "200":
          description: the created snapshot id
          content:
            text/plain:
              schema:
                type: integer
                format: int32
                example: 1
  /items/snapshots/compare:
    get:
      tags:
        - Item
      description: compares the two given snapshots
      operationId: compareSnapshots
      parameters:
        - name: firstSnapshotId
          in: query
          description: the first snapshot id
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: secondSnapshotId
          in: query
          description: the second snapshot id
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: the comparison object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotsComparison'
        "404":
          description: one of the two snapshots not found
  /items/snapshots/{id}:
    get:
      tags:
        - Item
      description: returns a specific snapshot
      operationId: getSnapshot
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: a snapshot
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemNoBeaconData'
        "404":
          description: snapshot not found
    delete:
      tags:
        - Item
      description: deletes a specific snapshot
      operationId: deleteSnapshot
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successfully deleted snapshot
        "404":
          description: snapshot not found
  /items/closest:
    get:
      tags:
      - Item
      description: returns the 5 closest items per floor
      operationId: getClosestItems
      parameters:
      - name: latitude
        in: query
        description: user latitude
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: longitude
        in: query
        description: user longitude
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: category
        in: query
        description: item category
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: accessControlString
        in: query
        description: accessControlString to access data
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: the 5 closest items per floor
          content:
            application/json:
              schema:
                type: object
  /items/{id}:
    get:
      tags:
      - Item
      description: returns a specific item if accessible with this accessControlString
      operationId: getItem
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: accessControlString
        in: query
        description: accessControlString to access data
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: an item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "404":
          description: Item not found or inaccessible
    put:
      tags:
      - Item
      description: updates a specific item if the accessControlString has access to
        the item
      operationId: updateItem
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: scan
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: accessControlString
        in: query
        description: accessControlString to access data
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdateInfo'
      responses:
        "200":
          description: the updated item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    delete:
      tags:
      - Item
      description: deletes a specific item if the accessControlString has access to
        the item
      operationId: deleteItem
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: accessControlString
        in: query
        description: accessControlString to access data
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successfully deleted item
  /analytics/status:
    get:
      tags:
      - Analytics
      description: returns the items' status
      operationId: analyticsGetStatus
      responses:
        "200":
          description: the status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusAgg'
components:
  schemas:
    Relay:
      type: object
      properties:
        mqttID:
          type: string
        mqttUsername:
          type: string
        relayID:
          type: string
        ledStatus:
          type: boolean
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        floor:
          type: integer
        lastModified:
          type: string
          format: date-time
        wifi:
          $ref: '#/components/schemas/Relay_wifi'
      description: A relay
    RelayRegisterInfo:
      type: object
      properties:
        mqttID:
          type: string
        mqttUsername:
          type: string
        mqttPassword:
          type: string
          format: password
        relayID:
          type: string
        ledStatus:
          type: boolean
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        floor:
          type: integer
        wifi:
          $ref: '#/components/schemas/Relay_wifi'
      description: A relay to register
    RelayUpdateInfo:
      type: object
      properties:
        ledStatus:
          type: boolean
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        floor:
          type: integer
        wifi:
          $ref: '#/components/schemas/Relay_wifi'
        beacon:
          $ref: '#/components/schemas/RelayUpdateInfo_beacon'
      description: Update information for a relay
    User:
      type: object
      properties:
        userID:
          type: string
        username:
          type: string
        company:
          type: string
        accessControlString:
          type: string
      description: A user
    UserRegisterInfo:
      required:
      - accessControlString
      - company
      - password
      - userID
      - username
      type: object
      properties:
        userID:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
        company:
          type: string
        accessControlString:
          type: string
      description: A user to register
    UserUpdateInfo:
      type: object
      properties:
        password:
          type: string
          format: password
      description: Update information for a user
    UserAuthenticateInfo:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      description: Authenticate information for a user
    UserAuthenticateReturnedInfo:
      type: object
      properties:
        company:
          type: string
        userID:
          type: string
      description: Authenticate returned information for a user
    Item:
      type: object
      properties:
        id:
          type: integer
        beacon:
          type: string
        category:
          type: string
        service:
          type: string
        itemID:
          type: string
        accessControlString:
          type: string
        brand:
          type: string
        model:
          type: string
        supplier:
          type: string
        purchaseDate:
          type: string
          format: date
        purchasePrice:
          minimum: 0
          type: number
        originLocation:
          type: string
        currentLocation:
          type: string
        room:
          type: string
        contact:
          type: string
        currentOwner:
          type: string
        previousOwner:
          type: string
        orderNumber:
          type: string
        color:
          type: string
        serialNumber:
          type: string
        maintenanceDate:
          type: string
          format: date
        comments:
          type: string
        lastModifiedDate:
          type: string
          format: date
        lastModifiedBy:
          type: string
        timestamp:
          type: string
          format: date-time
        battery:
          maximum: 100
          minimum: 0
          type: integer
          format: int32
        status:
          type: string
        beaconStatus:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        floor:
          type: integer
          format: int32
        temperature:
          type: number
          format: double
      description: An item
    ItemNoBeaconData:
      type: object
      properties:
        id:
          type: integer
          format: int32
        beacon:
          type: string
        category:
          type: string
        service:
          type: string
        itemID:
          type: string
        brand:
          type: string
        model:
          type: string
        supplier:
          type: string
        purchaseDate:
          type: string
          format: date
        purchasePrice:
          minimum: 0
          type: number
        originLocation:
          type: string
        currentLocation:
          type: string
        room:
          type: string
        contact:
          type: string
        currentOwner:
          type: string
        previousOwner:
          type: string
        orderNumber:
          type: string
        color:
          type: string
        serialNumber:
          type: string
        maintenanceDate:
          type: string
          format: date
        comments:
          type: string
        lastModifiedDate:
          type: string
          format: date
        lastModifiedBy:
          type: string
        status:
          type: string
      description: An item to register
    ItemRegisterInfo:
      type: object
      properties:
        id:
          type: integer
          format: int32
        beacon:
          type: string
        category:
          type: string
        service:
          type: string
        itemID:
          type: string
        accessControlString:
          type: string
        brand:
          type: string
        model:
          type: string
        supplier:
          type: string
        purchaseDate:
          type: string
          format: date
        purchasePrice:
          minimum: 0
          type: number
        originLocation:
          type: string
        currentLocation:
          type: string
        room:
          type: string
        contact:
          type: string
        currentOwner:
          type: string
        previousOwner:
          type: string
        orderNumber:
          type: string
        color:
          type: string
        serialNumber:
          type: string
        maintenanceDate:
          type: string
          format: date
        comments:
          type: string
        lastModifiedDate:
          type: string
          format: date
        lastModifiedBy:
          type: string
      description: An item to register
    ItemUpdateInfo:
      type: object
      properties:
        beacon:
          type: string
        category:
          type: string
        service:
          type: string
        itemID:
          type: string
        accessControlString:
          type: string
        brand:
          type: string
        model:
          type: string
        supplier:
          type: string
        purchaseDate:
          type: string
          format: date
        purchasePrice:
          minimum: 0
          type: number
        originLocation:
          type: string
        currentLocation:
          type: string
        room:
          type: string
        contact:
          type: string
        currentOwner:
          type: string
        previousOwner:
          type: string
        orderNumber:
          type: string
        color:
          type: string
        serialNumber:
          type: string
        maintenanceDate:
          type: string
          format: date
        comments:
          type: string
        lastModifiedDate:
          type: string
          format: date
        lastModifiedBy:
          type: string
      description: Update information for an item
    Snapshot:
      type: object
      properties:
        id:
          type: integer
          format: int32
        date:
          type: string
          format: date
    SnapshotsComparison:
      type: object
      properties:
        onlyFirst:
          description: items only present in the first snapshot
          type: array
          items:
            $ref: '#/components/schemas/ItemNoBeaconData'
        onlySecond:
          description: items only present in the second snapshot
          type: array
          items:
            $ref: '#/components/schemas/ItemNoBeaconData'
        inCommon:
          description: items present in both snapshots (in common)
          type: array
          items:
            $ref: '#/components/schemas/ItemNoBeaconData'
    Status:
      type: object
      properties:
        available:
          type: integer
          format: int32
        unavailable:
          type: integer
          format: int32
        toRepair:
          type: integer
          format: int32
      description: Item's status
    StatusAgg:
      type: object
      properties:
        overall:
          $ref: '#/components/schemas/Status'
      description: The status of the items
    Relay_wifi:
      type: object
      properties:
        ssid:
          type: string
        password:
          type: string
          format: password
    RelayUpdateInfo_beacon:
      type: object
      properties:
        mac:
          type: string
        txPower:
          type: integer
          format: int32
